//
//  HomeScreenPresenter.swift
//  VeryCreatives
//
//  Created by Brenner on 06/09/21.
//
//  This file was generated by the ðŸ’š VIPER generator.
//

import UIKit

final class HomeScreenPresenter {
    
    // MARK: - Private properties
    
    private weak var view: HomeScreenViewInterface?
    private let interactor: HomeScreenInteractorProtocol
    private let wireframe: HomeScreenWireframeInterface
        
    private enum Strings {
        static let staticName = "VeryCreatives!"
        static let cellIdentifier = "MovieCell"
        static let welcomeTitle = HomeScreenViewControllerStrings.welcomeTitle.localized().replacingOccurrences(of: "%@", with: Strings.staticName)
        static let subtitle = HomeScreenViewControllerStrings.headerSubtitle.localized()
        static let popularMovies = HomeScreenViewControllerStrings.popularMoviesTitle.localized()
        static let topRatedMovies = HomeScreenViewControllerStrings.topRatedMoviesTitle.localized()
        static let genericErrorText = HomeScreenViewControllerStrings.genericErrorText.localized()
        static let buttonTitle = HomeScreenViewControllerStrings.buttonTitle.localized()
        static let networkNotAvailableText = HomeScreenViewControllerStrings.networkNotAvailableText.localized()
    }
    
    private enum Constants {
        static let welcomeSize: CGFloat = 24.0
        static let iconBordWidth: CGFloat = 1.0
        static let widthCompensation: CGFloat = 20.0
        static let widthDivisionFactor: CGFloat = 2.0
        static let heightDivisionFactor:CGFloat = 3.0
    }
    
    private var popularMovies: Movie? {
        didSet {
            checkIfAllRequestsIsDone()
        }
    }
    
    private var topRatedMovies: Movie? {
        didSet {
            checkIfAllRequestsIsDone()
        }
    }
    
    private var isPopularMovies = true {
        didSet {
            view?.reloadData()
        }
    }
    
    // MARK: - Lifecycle
    init(wireframe: HomeScreenWireframeInterface, view: HomeScreenViewInterface, interactor: HomeScreenInteractorProtocol) {
        self.wireframe = wireframe
        self.view = view
        self.interactor = interactor
    }
    
    func viewDidLoad() {
        view?.showLoading(hide: false)
        interactor.getPopularMovies()
        interactor.getTopRatedMovies()
    }
    
    private func configureIcon(_ imageView: UIImageView) {
        imageView.layer.borderColor = UIColor.white.cgColor
        imageView.layer.borderWidth = Constants.iconBordWidth
        imageView.circle()
    }
    
    private func configureWelcomeLabel(_ label: UILabel) {
        label.text = Strings.welcomeTitle
        label.setBoldFontRange(changeText: Strings.staticName, size: Constants.welcomeSize)
    }
    
    private func checkIfAllRequestsIsDone() {
        if popularMovies != nil, topRatedMovies != nil {
            view?.reloadData()
            view?.showLoading(hide: true)
        }
    }
}

// MARK: - Presenter Extension
extension HomeScreenPresenter: HomeScreenPresenterInterface {
    func tryAgainAction() {
        viewDidLoad()
    }
    
    func sortMovies(isPopularMovies: Bool) {
        self.isPopularMovies = isPopularMovies
    }
    
    func setupSegmentedControl(_ segmentedControl: UISegmentedControl) {
        segmentedControl.setTitle(Strings.popularMovies, forSegmentAt: 0)
        segmentedControl.setTitle(Strings.topRatedMovies, forSegmentAt: 1)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        // Define cell width
        let screenWidth = UIScreen.main.bounds.width
        let widthDesired = CGFloat(screenWidth / Constants.widthDivisionFactor - Constants.widthCompensation)
        
        // Define cell height
        let screenHeight = UIScreen.main.bounds.height
        let heightDesired = CGFloat(screenHeight / Constants.heightDivisionFactor)
        
        return CGSize(width: widthDesired, height: heightDesired)
    }
    
    func configure(_ collectionView: UICollectionView) {
        let nib = UINib(nibName: Strings.cellIdentifier, bundle: nil)
        collectionView.register(nib, forCellWithReuseIdentifier: Strings.cellIdentifier)
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        guard let contentID = isPopularMovies ? popularMovies?.results?[indexPath.row].id : topRatedMovies?.results?[indexPath.row].id else { return }
        wireframe.navigate(to: .goToDetail(contentID: contentID))
    }
    
    func numberOfItemsInSection(_ collectionView: UICollectionView, section: Int) -> Int {
        return  isPopularMovies ? popularMovies?.results?.count ?? 0 : topRatedMovies?.results?.count ?? 0
    }
    
    func cellForItemAt(_ collectionView: UICollectionView, indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: Strings.cellIdentifier, for: indexPath) as? MovieCell else {
            return UICollectionViewCell()
        }
        let movie =  isPopularMovies ? popularMovies?.results?[indexPath.row] : topRatedMovies?.results?[indexPath.row]
        cell.setup(movie: movie)
        
        return cell
    }
    
    func setupWelcomeHeader(_ title: UILabel, _ subtitle: UILabel, _ icon: UIImageView) {
        configureIcon(icon)
        configureWelcomeLabel(title)
        subtitle.text = Strings.subtitle
    }
}

// MARK: - Interactor Extension
extension HomeScreenPresenter: HomeScreenInteractorResponseProtocol {
    func responseGetTopRatedMoviesSuccess(movie: Movie?) {
        self.topRatedMovies = movie
    }
    
    func responseGetPopularMoviesSuccess(movie: Movie?) {
        self.popularMovies = movie
    }
    
    func responseError() {
        view?.showErrorScreen(text: Strings.genericErrorText, buttonTitle: Strings.buttonTitle)
    }
    
    func networkingNotAvailable() {
        view?.showErrorScreen(text: Strings.networkNotAvailableText, buttonTitle: Strings.buttonTitle)
    }
    
}
