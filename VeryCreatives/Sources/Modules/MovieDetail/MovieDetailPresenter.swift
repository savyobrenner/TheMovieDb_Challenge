//
//  MovieDetailPresenter.swift
//  VeryCreatives
//
//  Created by Brenner on 07/09/21.
//
//  This file was generated by the ðŸ’š VIPER generator.
//

import UIKit

final class MovieDetailPresenter {
    
    // MARK: - Private properties
    private weak var view: MovieDetailViewInterface?
    private let interactor: MovieDetailInteractorProtocol
    private let wireframe: MovieDetailWireframeInterface
        
    private enum Strings {
        static let releaseDateTitle = MovieDetailsViewControllerStrings.releaseDateTitle.localized()
        static let runtimeTitle = MovieDetailsViewControllerStrings.runtimeTitle.localized()
        static let descriptionTitleLable = MovieDetailsViewControllerStrings.descriptionTitleLable.localized()
        static let watchNowButton = MovieDetailsViewControllerStrings.watchNowButton.localized()
        static let warningRedirectExternalLink = MovieDetailsViewControllerStrings.warningRedirectExternalLink.localized()
        static let theMovieDbCredits = MovieDetailsViewControllerStrings.theMovieDbCredits.localized()
    }
    
    private enum Constants {
        static let baseScrollViewHeight = 1000
        static let baseLabelLineHeight = 17
    }
    
    private var movieDetails: MovieDetail? {
        didSet {
            guard let movieDetails = movieDetails else { return }
            checkIfRequestIsDone()
            view?.loadInformations(movie: movieDetails)
        }
    }
    
    private var movieGenresList: GenresList? {
        didSet {
            checkIfRequestIsDone()
        }
    }
    
    private var movieVideos: MovieVideo? {
        didSet {
            view?.getVideoId(getTrailerVideoId(movieVideos))
        }
    }
    
    // MARK: - Lifecycle
    init(wireframe: MovieDetailWireframeInterface, view: MovieDetailViewInterface, interactor: MovieDetailInteractorProtocol) {
        self.wireframe = wireframe
        self.view = view
        self.interactor = interactor
    }
    
    func viewDidLoad() {
        
    }
    
    private func loadLanguage() {
        view?.loadLanguage(releaseDate: Strings.releaseDateTitle,
                           runtime: Strings.runtimeTitle,
                           description: Strings.descriptionTitleLable,
                           watchNow: Strings.watchNowButton,
                           warningExternalLinks: Strings.warningRedirectExternalLink,
                           theMovieDbCredits: Strings.theMovieDbCredits)
    }
    
    private func getTrailerVideoId(_ movieVideo: MovieVideo?) -> String {
        guard let movieVideo = movieVideo, let Id = movieVideo.results.first?.key else { return "" }
        return Id
    }
    
    func checkIfRequestIsDone() {
        if let movieDetails = movieDetails, movieGenresList != nil {
            view?.loadGenres(getGenreName(movieDetails.genres))
            view?.showLoading(hide: true)
        }
    }
    
    private func getGenreName(_ genres: [Genre]?) -> [String] {
        guard let genres = genres else { return [""] }
        var formattedGenre: [String] = []
        var validator: Bool?
        var i = 0
        for id in genres {
            validator = self.movieGenresList?.genres.contains(where: { genre in
                if genre.id == id.id, let name = genre.name {
                    formattedGenre.append(name)
                    return true
                } else {
                    return false
                }
            })
            
            i += 1
        }
        
        if validator ?? false {
            return formattedGenre
        } else {
            return [""]
        }
    }
}

// MARK: - Extensions

extension MovieDetailPresenter: MovieDetailPresenterInterface {
    func updateScrollViewHeight(_ label: UILabel, _ constraint: NSLayoutConstraint) {
        let descriptionLabelSize = label.numberOfVisibleLines
        constraint.constant = CGFloat(Constants.baseScrollViewHeight + (descriptionLabelSize * Constants.baseLabelLineHeight))
    }
    
    func animateScreenWhenScrool(_ isScrolling: Bool, _ constraint: NSLayoutConstraint) {
        let constraintWhenIsScrolling: CGFloat = -100
        let constraintWhenIsNotScrolling: CGFloat = 0
        
        if isScrolling {
            constraint.constant = constraintWhenIsScrolling
        } else {
            constraint.constant = constraintWhenIsNotScrolling
        }
        
        UIView.animate(withDuration: 0.3) {
            self.view?.layoutIfNeeded()
        }
    }
    
    func getWatchNowLink() -> String {
        return EndPoint.watchNowLink(contentID: movieDetails?.id ?? 0).fullPath
    }
}
