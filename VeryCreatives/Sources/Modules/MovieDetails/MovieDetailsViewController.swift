//
//  MovieDetailsViewController.swift
//  VeryCreatives
//
//  Created by Brenner on 07/09/21.
//
//  This file was generated by the ðŸ’š VIPER generator.
//

import UIKit
import youtube_ios_player_helper

final class MovieDetailsViewController: UIViewController {
    
    // MARK: - Outlets
    
    // Labels
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var votingRate: UILabel!
    @IBOutlet weak var releaseDateTitle: UILabel!
    @IBOutlet weak var runtimeTitle: UILabel!
    @IBOutlet weak var releaseDate: UILabel!
    @IBOutlet weak var runtime: UILabel!
    @IBOutlet weak var descriptionTitleLable: UILabel!
    @IBOutlet weak var descriptionLabel: UILabel!
    @IBOutlet weak var watchNowButton: UIButton!
    @IBOutlet weak var warningRedirectExternalLink: UILabel!
    @IBOutlet weak var theMovieDbCredits: UILabel!
    
    // Collections
    @IBOutlet var starsImageView: [UIImageView]!
    @IBOutlet var genresLabel: [UILabel]!
    
    // UIView
    @IBOutlet weak var videoPlayer: YTPlayerView!
    @IBOutlet weak var contentView: UIView!
    @IBOutlet weak var coverImage: UIImageView!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var maskImageView: UIImageView!
    
    // MARK: - Constraints
    @IBOutlet weak var imageTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var scrollViewHeight: NSLayoutConstraint!
    
    // MARK: - Class properties
    private var isScrolling = false {
        didSet {
            presenter.animateScreenWhenScrool(isScrolling, imageTopConstraint)
        }
    }
    
    // MARK: - Public properties
    var presenter: MovieDetailsPresenterInterface!
    
    // MARK: - Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        presenter.viewDidLoad()
        self.viewConfiguration()
    }
    
    // MARK: - Class Configurations
    private func viewConfiguration() {
        maskImageView.applyGradient()
        scrollView.delegate = self
    }
    
    // MARK: - UIActions
    @IBAction func closeAction(_ sender: UIButton) {
        self.dismiss(animated: true, completion: nil)
    }
    
    @IBAction func scrollToTop(_ sender: UITapGestureRecognizer) {
        scrollView.setContentOffset(.zero, animated: true)
    }
    
    @IBAction func watchNowAction(_ sender: UIButton) {
        openExternalLinks(link: presenter.getWatchNowLink())
    }
    
    // MARK: - Class Methods
    
}

// MARK: - Extensions
extension MovieDetailsViewController: MovieDetailsViewInterface {
    func showLoading(hide: Bool) {
        self.fullScreenLoading(hide: hide)
    }
    
    func loadGenres(_ genres: [String]) {
        genresLabel.updateGenres(genres)
    }
    
    func loadInformations(movie: MovieDetails) {
        guard let rate = movie.voteAverage, let coverImagePath = movie.backdropPath else { return }
        
        self.starsImageView.updateStars(rate.rounded().formatRating())
        self.coverImage.setImage(path: coverImagePath, isAPIImage: true)
        
        self.titleLabel.text = movie.title
        self.votingRate.text = String(rate)
        self.descriptionLabel.text = movie.overview
        self.releaseDate.text = movie.releaseDate?.formatDate()
        self.runtime.text = String(movie.runtime ?? 0) + " min"
        
        presenter.updateScrollViewHeight(descriptionLabel, scrollViewHeight)
    }
    
    func getVideoId(_ videoId: String) {
        let playerConfigurations =
            ["playsinline":"1",
             "rel":"0",
             "fs" : "0",
             "controls":"1"]
        videoPlayer.load(withVideoId: videoId, playerVars: playerConfigurations)
    }
    
    func loadLanguage(releaseDate: String, runtime: String, description: String, watchNow: String, warningExternalLinks: String, theMovieDbCredits: String) {
        self.releaseDateTitle.text = releaseDate
        self.runtimeTitle.text = runtime
        self.descriptionTitleLable.text = description
        self.watchNowButton.setTitle(watchNow, for: .normal)
        self.warningRedirectExternalLink.text = warningExternalLinks
        self.theMovieDbCredits.text = theMovieDbCredits
    }
    
    func layoutIfNeeded() {
        self.view?.layoutIfNeeded()
    }
}

extension MovieDetailsViewController: UIScrollViewDelegate {
    func scrollViewWillBeginDragging(_ scrollView: UIScrollView) {
        isScrolling = true
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        var position: [CGPoint] = []
        let scrollTop = CGPoint(x: 0.0, y: 0.0)
        let scrollOffset = scrollView.contentOffset
        
        position.append(scrollOffset)
        
        if position.count > 4 { position = [] }
        
        if position.first == scrollTop && position.last == scrollTop {
            isScrolling = false
        }
    }
}
